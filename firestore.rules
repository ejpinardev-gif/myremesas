/**
 * @fileOverview Firestore Security Rules for Global Exchange Hub.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for transaction data,
 * while allowing public read access to admin account information.
 *
 * Data Structure:
 * - User transaction data is nested under /artifacts/{appId}/users/{userId}/transactions/{transactionId},
 *   ensuring that each user can only access their own transaction records.
 * - Admin account details are stored in the publicly accessible collection
 *   /artifacts/{appId}/public/data/admin_accounts/{accountId}, allowing all users to view them.
 *
 * Key Security Decisions:
 * - User transaction data is strictly controlled via path-based ownership, meaning only the user with the matching {userId}
 *   can access their transactions.
 * - Admin accounts are publicly readable to facilitate easy access to application's bank details.
 * - Data validation is minimal in this prototyping phase.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Manages user transaction data, enforcing strict ownership.
     * @path /artifacts/{appId}/users/{userId}/transactions/{transactionId}
     * @allow (create) - Authenticated user creates a new transaction with matching userId.
     *    Request: { auth: { uid: 'user123' }, resource.data.userId: 'user123' }
     * @allow (get) - Authenticated user reads a transaction with matching userId.
     *    Request: { auth: { uid: 'user123' } }
     * @allow (update) - Authenticated user updates a transaction with matching userId.
     *    Request: { auth: { uid: 'user123' } }
     * @allow (delete) - Authenticated user deletes a transaction with matching userId.
     *    Request: { auth: { uid: 'user123' } }
     * @deny (create) - Authenticated user attempts to create a transaction with a mismatched userId.
     *    Request: { auth: { uid: 'user123' }, resource.data.userId: 'user456' }
     * @principle Enforces document ownership for writes and restricts access to a user's own data.
     */
    match /artifacts/{appId}/users/{userId}/transactions/{transactionId} {
      // Define helper function
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isSignedIn() && isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Allows public read access to admin account details, with authenticated-user-only writes.
     * @path /artifacts/{appId}/public/data/admin_accounts/{accountId}
     * @allow (get) - Any user can read admin account details.
     * @allow (list) - Any user can list admin accounts.
     * @allow (create) - Authenticated users can create admin accounts.
     *    Request: { auth: { uid: 'user123' } }
     * @allow (update) - Authenticated users can update admin accounts.
     *    Request: { auth: { uid: 'user123' } }
     * @allow (delete) - Authenticated users can delete admin accounts.
     *    Request: { auth: { uid: 'user123' } }
     * @principle Provides public read access while restricting write access to authenticated users.
     */
    match /artifacts/{appId}/public/data/admin_accounts/{accountId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }
  }
}