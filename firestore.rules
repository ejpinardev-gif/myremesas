/**
 * @file Firestore Security Rules for Global Exchange Hub.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for transaction data, allowing users to only access their own transactions.
 * Admin account data is publicly readable but writable only by authenticated users.
 *
 * Data Structure:
 * - User transaction data is nested under /artifacts/{appId}/users/{userId}/transactions/{transactionId}.
 * - Admin account data is stored under /artifacts/{appId}/public/data/admin_accounts/{accountId}.
 *
 * Key Security Decisions:
 * - Users can only create, read, update, and delete transactions under their own user ID.
 * - Admin account data is publicly readable.
 * - Only authenticated users can create, update or delete Admin accounts
 * - Listing of admin accounts is public.
 *
 * Denormalization for Authorization:
 * - Path-based ownership is used for transactions to avoid the need for additional reads to determine ownership.
 *
 * Structural Segregation:
 * - User transaction data and admin account data are stored in separate collections with different security requirements.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secure user transaction data.
     * @path /artifacts/{appId}/users/{userId}/transactions/{transactionId}
     * @allow (create) Authenticated user creates a transaction under their own userId.
     * @deny (create) User attempts to create a transaction under another user's userId.
     * @allow (get, list) Authenticated user reads/lists transactions under their own userId.
     * @deny (get, list) User attempts to read/list transactions under another user's userId.
     * @allow (update, delete) Authenticated user updates/deletes a transaction under their own userId.
     * @deny (update, delete) User attempts to update/delete a transaction under another user's userId.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /artifacts/{appId}/users/{userId}/transactions/{transactionId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
          return isOwner(userId) && resource != null;
      }

      allow create: if isOwner(userId);
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Secure admin account data.
     * @path /artifacts/{appId}/public/data/admin_accounts/{accountId}
     * @allow (create, update, delete) Authenticated user creates/updates/deletes an admin account.
     * @deny (create, update, delete) Unauthenticated user attempts to create/update/delete an admin account.
     * @allow (get, list) Anyone can read/list admin accounts.
     * @principle Allows public read access to admin account data while restricting write access to authenticated users.
     */
    match /artifacts/{appId}/public/data/admin_accounts/{accountId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }
  }
}