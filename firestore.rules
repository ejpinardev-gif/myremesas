/**
 * @file Firestore Security Rules for Global Exchange Hub.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for transaction data and allows public read access to admin account information. Authenticated users can manage admin accounts.
 *
 * Data Structure:
 * - /artifacts/{appId}/users/{userId}/transactions/{transactionId}: Stores private transaction data for each user, accessible only by the user.
 * - /artifacts/{appId}/public/data/admin_accounts/{accountId}: Stores public admin account information, readable by all users.
 *
 * Key Security Decisions:
 * - User transactions are strictly controlled via path-based ownership. Users can only access their own transaction data.
 * - Admin accounts are publicly readable but can only be created, updated, or deleted by authenticated users.
 * - Listing of transactions is allowed only for the owner of the transactions.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Grants access to user-specific transaction documents.
     * @path /artifacts/{appId}/users/{userId}/transactions/{transactionId}
     * @allow (create) User with ID 'user123' creates a transaction with userId: 'user123'.
     * @deny (create) User with ID 'user456' attempts to create a transaction with userId: 'user123'.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /artifacts/{appId}/users/{userId}/transactions/{transactionId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.auth.uid == userId;
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Grants public read access to admin account documents, but restricts write access to authenticated users.
     * @path /artifacts/{appId}/public/data/admin_accounts/{accountId}
     * @allow (get) Any user can read admin account details.
     * @allow (create) Authenticated user can create admin account.
     * @deny (create) Unauthenticated user cannot create admin account.
     * @principle Allows public read access but restricts write access to authenticated users.
     */
    match /artifacts/{appId}/public/data/admin_accounts/{accountId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }
  }
}